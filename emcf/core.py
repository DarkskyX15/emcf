
from typing import TypeAlias, Any, Literal, TextIO, Callable, Protocol
import os, random

EMCF = "a0.1.0"

ConfigMap: TypeAlias = dict[Literal[
    "namespace", "version", "dist", "prefix"
], Any]

class MCFWriter(Protocol):
    def __call__(self, io: TextIO, *args: Any): ...

MCFVersion: TypeAlias = Literal[1204, 1211]

def getMultiPaths(folder_path: str) -> tuple[list[str], list[str]]:
    file_path_list = list()
    folder_list = list()
    for filepath, _, filenames in os.walk(folder_path):
        for filename in filenames:
            file_path_list.append(os.path.join(filepath, filename))
        folder_list.append(filepath)
    return (file_path_list, folder_list)

class FoolID:
    _present: list[int]
    _chars: list[str]
    def __init__(self, seed: float | None):
        self._present = []
        self._chars = []

        fs = None if seed is None else lambda: seed
        self._present = [0]
        differ = ord('a') - ord('A')
        for i in range(ord('A'), ord('Z')):
            self._chars.append(chr(i))
            self._chars.append(chr(i + differ))
        random.shuffle(self._chars, fs)
    
    def get(self) -> str:
        fid = ''.join([self._chars[idx] for idx in self._present])
        last = len(self._present)
        self._present[last - 1] += 1
        for i in range(last - 1, -1, -1):
            if self._present[i] >= len(self._chars):
                if i == 0:
                    self._present[i] = 0
                    self._present.insert(0, 0)
                    break
                else:
                    self._present[i] = 0
                    self._present[i - 1] += 1
        return fid

class MCFunction:
    _namespace: str
    _mcf_version: MCFVersion
    _dist: str
    _wk_root: str

    _operation_stack: list
    _identity_map: set[str]
    _fool_id_generator: FoolID
    _prefix: str
    _io_ptr: str
    _io_history: list[str]

    sb_general: str
    sb_sys: str
    storage: str

    CALC_RES = "reg1"
    CALC_CONST = "reg2"
    REG3 = "reg3"

    def __init__(self):
        self._operation_stack = []
        self._mcf_version = 1204
        self._dist = ".\\build"
        self._wk_root = ".\\build\\default\\functions"
        self._namespace = "default"
        self._identity_map = set()
        self._prefix = """--- Generated by EMCF ---"""
        self._fool_id_generator = FoolID(None)
        self._io_history = []
        self._io_ptr = None

    def useConfig(self, cfg_map: ConfigMap) -> None:
        self._namespace = cfg_map.get("namespace", self._namespace)
        self._mcf_version = cfg_map.get("version", self._mcf_version)
        self._dist = cfg_map.get("dist", self._dist)
        self._prefix = cfg_map.get("prefix", self._prefix)
        self._identity_map.clear()

        self.sb_general = f"emcf_{self._namespace}"
        self.sb_sys = f"emcf_{self._namespace}_sys"
        self.storage = f"{self._namespace}:emcf"

        path_build = f"{self._dist}\\{self._namespace}\\functions\\emcf"
        self._wk_root = f"{self._dist}\\{self._namespace}\\functions"
        os.makedirs(path_build, exist_ok=True)
        files, _ = getMultiPaths(self._wk_root)
        for file in files:
            os.remove(file)

        self._io_ptr = f"{self._wk_root}\\main.mcfunction"

        with open(self._io_ptr, 'a', encoding='utf-8') as file:
            file.write(f"# {self._prefix} \n")
            file.write(

f"""scoreboard objectives add {self.sb_general} dummy
scoreboard objectives add {self.sb_sys} dummy
data modify storage {self.storage} version set value "{EMCF}"
scoreboard players set {MCF.CALC_RES} {self.sb_sys} 0
scoreboard players set {MCF.CALC_CONST} {self.sb_sys} 0
scoreboard players set {MCF.REG3} {self.sb_sys} 0
"""
            )
        self._io_history.append(f"{self._wk_root}\\main.mcfunction")

    def registerValue(self) -> str:
        fid = self._fool_id_generator.get()
        self._identity_map.add(fid)
        return fid

    def deleteValue(self, _id: str) -> None:
        with open(self._io_ptr, 'a') as file:
            file.write(
f"""scoreboard players reset #{_id} {MCF.sb_general}
"""
            )
        self._identity_map.remove(_id)

    def exist(self, _id: str) -> bool:
        return True if _id in self._identity_map else False

    def write(self, _writer: MCFWriter, *args: Any) -> None:
        with open(self._io_ptr, 'a') as file:
            _writer(file, *args)

MCF = MCFunction()
